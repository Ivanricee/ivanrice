---
interface Props {
  className?: string
  layers?: number // 1,2,3
  id?: number
  src: string
  alt: string
  href?: string
}
const { className, id = 0, layers = 0, src, alt, href } = Astro.props

const arrLayers = Array.from(Array(layers))
---

<div class={`relative ${className} `}>
  {
    arrLayers.map((_, i) => {
      const randRotate = String(Math.random() * 3 - 1)
      const randTY = String(Math.random() * 1.7 - 2)
      const randTX = String(Math.random() * 0 - 1)
      const isLastLayer = layers === i + 1

      return (
        <div
          class={`card card-xl absolute z-10 h-48 w-40 origin-top border border-orange-500/65
            bg-gradient-to-r from-orange-500/25 to-orange-300/5 p-1.5 pb-5
          ${
            isLastLayer
              ? '-translate-x-5 -translate-y-4 -rotate-2 overflow-hidden shadow-lg shadow-amber-900/70'
              : 'translate-x-0 translate-y-0 rotate-2  shadow-xl shadow-amber-600/20'
          } `}
        >
          {isLastLayer && (
            <div class="relative h-full bg-blue-700/50 ">
              <picture>
                <img
                  src={src}
                  alt={alt}
                  class="absolute inset-0  h-full w-full  object-cover object-center "
                />
              </picture>
            </div>
          )}
        </div>
      )
    })
  }
</div>
<style>
  @keyframes rotateAndMove {
    from {
      transform: rotate(0deg) translate(0, 0);
    }
    to {
      transform: rotate(var(--rotate)) translate(var(--translateX), var(--translateY));
    }
  }
  .card {
    --rotate: 0;
    --translateX: 0;
    --translateY: 0;
    transform: rotate(var(--rotate)) translate(var(--translateX), var(--translateY));
  }
</style>
