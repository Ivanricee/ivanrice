---
interface Props {
  className?: string
  layers?: number // 1,2,3
  id?: number
  animate?: boolean
  src: string
  alt: string
  href?: string
}
const { className, id = 0, animate = false, layers = 2, src, alt, href } = Astro.props

const arrLayers = Array.from(Array(layers))
const hasIdForTransition = id !== 0
---

<div class={`relative ${className} `}>
  {
    arrLayers.map((_, i) => {
      const randRotate = String(Math.random() * 6 - 3)
      const randTY = String(Math.random() * 1.5 - 1)
      const randTX = String(Math.random() * 1.5 - 1)
      const isLastLayer = layers === i + 1
      const isAnimated =
        animate && isLastLayer
          ? 'group transition duration-300 ease-in-out transform hover:-rotate-0 hover:scale-110 hover:shadow-card-2xl'
          : ''

      const picture = isLastLayer && (
        <div class="bg-american-blue-700/50 relative h-full overflow-hidden rounded-xl">
          <picture>
            <img
              src={src}
              alt={alt}
              width="20"
              height="20"
              class="absolute top-0 left-0 h-full w-full rounded-t-xl object-cover object-center transition duration-150 group-hover:scale-[1.1]"
            />
          </picture>
        </div>
      )

      if (hasIdForTransition && isLastLayer)
        return (
          <div
            class={`card bg-gradient-card card-xl shadow-card-xl absolute z-10 aspect-square h-full w-full origin-top rounded-2xl p-3 ${isAnimated} `}
            style={`--rotate: ${randRotate}deg; --translateX: ${randTX}rem; --translateY: ${randTY}rem`}
          >
            <a href={href} class="h-full w-full">
              <div class="h-full w-full">{picture}</div>
            </a>
          </div>
        )
      return (
        <div
          class={`card bg-gradient-card-b card-xl shadow-card-lg absolute z-10 aspect-square h-full w-full origin-top rounded-2xl p-2 ${isAnimated}`}
          style={`--rotate: ${randRotate}deg; --translateX: ${randTX}rem; --translateY: ${randTY}rem`}
        >
          {picture}
        </div>
      )
    })
  }
</div>
<style>
  @keyframes rotateAndMove {
    from {
      transform: rotate(0deg) translate(0, 0);
    }
    to {
      transform: rotate(var(--rotate)) translate(var(--translateX), var(--translateY));
    }
  }
  /*.card {
    --rotate: 0;
    --translateX: 0;
    --translateY: 0;
    animation: rotateAndMove 0.5s forwards;
  }*/
  .card {
    --rotate: 0;
    --translateX: 0;
    --translateY: 0;
    transform: rotate(var(--rotate)) translate(var(--translateX), var(--translateY));
  }
</style>
