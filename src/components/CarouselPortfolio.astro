---
import type { Image } from "@/env";
import {
  CLOUDINARY_HIGH,
  CLOUDINARY_LOW,
  CLOUDINARY_URL,
  CLOUDINARY_VIDEO,
  CLOUDINARY_VIDEO_URL,
} from "@/lib/constants";

interface Props {
  media: Image[];
  slide: boolean;
  id: number
}
const { media, slide, id } = Astro.props
const isSingle = media.length === 1
const getMediaLowQSrc = () => {
  const firstMedia = media[0].url;
  const isImg = firstMedia.endsWith("webp");
  if (isImg) return `${CLOUDINARY_URL}${CLOUDINARY_LOW}${media[0]}`;
  return `${CLOUDINARY_VIDEO_URL}${CLOUDINARY_VIDEO}${media[0]}`;
};

const mediaLowQSrc = getMediaLowQSrc();
const mediaStr = JSON.stringify(media)
---



<div id="carousel-portfolio" class="relative w-full h-full sm:p-8" transition:name={`card ${id} container`} data-video={mediaStr}>
  {
    isSingle ? (
    <div class={`relative h-full overflow-hidden rounded-xl sm:border-2 sm:border-ottoman-100/50 `}
      style={`background-color: ${media[0].bg};`}>
      <img
        src={ `${CLOUDINARY_URL}${CLOUDINARY_HIGH}${media[0].url}`}
        alt="carousel image"
        class={`w-full h-full object-contain rounded-2xl`}
      />
    </div>) :
    (
      <>
       <!-- Carousel wrapper -->
        <div class="relative h-full overflow-hidden sm:rounded-xl sm:border-2 sm:border-ottoman-100/50">
        {
          media.map(({url, bg, caption}, id) => {
            const srcImg = `${CLOUDINARY_URL}${CLOUDINARY_HIGH}${url}`
            if (url.endsWith("webp")){
              return (
                <div id={`carousel-item-${id}`} class={`item-portfolio hidden duration-700 ease-in-out`}
                  style={`background-color: ${bg};`}>
                  <img
                  src={srcImg}
                  alt="carousel image"
                  class={`w-full h-full object-contain rounded-2xl`}
                  />
                </div>
              )
            }
            return (
              <div id={`carousel-item-${id}`} class="item-portfolio hidden duration-700 ease-in-out absolute inset-0"
                 style={`background-color: ${bg};`}>
                 {
                  caption && (
                   <h2 class="text-ottoman-200 text-xl absolute z-10 top-0 left-0 right-0 text-center pt-4 pb-2 backdrop-blur-sm" >
                    {caption}
                   </h2>)
                 }
                <video id={`player${id}`} controls muted class="cld-video-player w-full h-full object-contain rounded-2xl bg-transparent"></video>
              </div>
            );
          })}
        </div>
        <!-- Slider indicators -->
        <div
            id="indicators"
            class="absolute bottom-14 left-1/2 z-30 flex -translate-x-1/2 space-x-3 rtl:space-x-reverse"
        >
          {
            media.map((_, id) => {
              return (
                <button
                    id={`carousel-indicator-${id}`}
                    type="button"
                    class="h-3 w-3 rounded-full"
                    aria-current="true"
                    aria-label={`Slide ${id}`}
                ></button>
              )
            })
          }
        </div>
        <!-- Slider controls -->
        <button
            id="data-carousel-prev"
            type="button"
            class="group absolute left-0 top-0 z-30 flex h-full cursor-pointer items-center justify-center px-4 sm:px-10 focus:outline-none"
        >
            <span
                class="inline-flex h-14 w-14 items-center justify-center rounded-full bg-american-blue-550/65 group-hover:bg-american-blue-550/85 group-focus:outline-none group-focus:ring-4 group-focus:ring-green-lime-400/40 transition-colors"
            >
                <svg
                    class="h-7 w-7 text-green-lime-500 "
                    aria-hidden="true"
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 6 10"
                >
                    <path
                        stroke="currentColor"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M5 1 1 5l4 4"
                    />
                </svg>
                <span class="hidden">Previous</span>
            </span>
        </button>
        <button
            id="data-carousel-next"
            type="button"
            class="group absolute right-0 top-0 z-30 flex h-full cursor-pointer items-center justify-center px-4 sm:px-10 focus:outline-none"
        >
            <span
                class="inline-flex h-14 w-14 items-center justify-center rounded-full bg-american-blue-550/65 group-hover:bg-american-blue-550/85 group-focus:outline-none group-focus:ring-4 group-focus:ring-green-lime-400/30"
            >
                <svg
                    class="h-7 w-7 text-green-lime-500 "
                    aria-hidden="true"
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 6 10"
                >
                    <path
                        stroke="currentColor"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="m1 9 4-4-4-4"
                    />
                </svg>
                <span class="hidden">Next</span>
            </span>
        </button>
      </>
    )
  }

</div>

<style>
  .cld-video-player{
    background: transparent;
  }
</style>
<script>
  // @ts-ignore
  import cloudinary from "cloudinary-video-player";
  import type { Image } from "@/env";
  import "cloudinary-video-player/cld-video-player.min.css"
  document.addEventListener('astro:page-load', () => {
     const carousel = document.getElementById('carousel-portfolio');
     if (carousel) {
        const mediaStr = carousel.dataset.video;
        const mediaArr = JSON.parse(mediaStr ?? '[]')
          mediaArr.forEach(({url,bg}: Image, i: number) => {
          if(url.endsWith("webm")){
            const player = cloudinary.videoPlayer(`player${i}`, {
              cloudName: 'ivanrice-c',
              controls: false,
              muted: true,
              pictureInPictureToggle: true,
              hideContextMenu: true,
              autoplay: true,
              loop: true
            });
            player.source(url, {
              sourceTypes: ['webm/vp9', 'mp4/h265', 'mp4/h264']
            })
          }
        })
     }
  })
</script>

<script >
  //Items
  import {
    Carousel,
    type CarouselInterface,
    type CarouselItem,
    type CarouselOptions,
    type InstanceOptions
  } from "flowbite"


  document.addEventListener('astro:page-load', () => {
    const carouselPortfolio = document.getElementById('carousel-portfolio')
    if(!carouselPortfolio) return
    const itemsPortfolio = carouselPortfolio!.querySelectorAll('.item-portfolio')
    const carouselItems = Array.from(itemsPortfolio).map((item, position) => ({
          position,
          el: item
        })
    )  as CarouselItem[]
    //indicators (dots)
    const indicatorWrap = document.getElementById('indicators')
    const indicators = indicatorWrap!.querySelectorAll('button')
    const carouselIndicators = Array.from(indicators).map((item, position) => ({
          position,
          el: item
        })
    ) as CarouselItem[]
    //Options
    const options: CarouselOptions = {
      interval: 6000000,
      indicators: {
        activeClasses: 'bg-american-blue-200',
        inactiveClasses:
            'bg-american-blue-100/50 dark:bg-gray-800/50 hover:bg-green-lime-100 dark:hover:bg-gray-800',
        items: carouselIndicators,
      }
    }
    // instance options object
    const instanceOptions: InstanceOptions = {
      id: 'carousel-portfolio',
      override: true
    };
    const carousel: CarouselInterface = new Carousel(carouselPortfolio, carouselItems, options, instanceOptions);
    //carousel.cycle();
    carousel.pause();

    //events for prev|next
    const $prevButton = document.getElementById('data-carousel-prev');
    const $nextButton = document.getElementById('data-carousel-next');
    $prevButton!.addEventListener('click', () => carousel.prev());
    $nextButton!.addEventListener('click', () => carousel.next());
    // Pause carousel on hover
    carouselPortfolio.addEventListener('mouseenter', () => carousel.pause());
    carouselPortfolio.addEventListener('mouseleave', () => carousel.cycle());

  });
</script>


